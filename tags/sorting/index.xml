<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sorting on Rad Blog</title>
    <link>https://xfrnk2.github.io/tags/sorting/</link>
    <description>Recent content in Sorting on Rad Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 Jul 2020 15:55:01 +0900</lastBuildDate>
    
	<atom:link href="https://xfrnk2.github.io/tags/sorting/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>정렬 알고리즘 - 선택 정렬(Selection Sort)</title>
      <link>https://xfrnk2.github.io/algorithm/selection_sort/</link>
      <pubDate>Tue, 14 Jul 2020 15:55:01 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/algorithm/selection_sort/</guid>
      <description>선택정렬의 원리와 특징 및 성능에 대해서 정리하는 글이다.
 &amp;lt;학습 목표&amp;gt;
 선택정렬의 원리를 이해한다. 선택정렬의 특징을 파악한다. 선택정렬의 성능을 기억한다. 모든 과정을 설명할 수 있다. 선택정렬을 프로그래밍 언어로 구현할 수 있다.    선택정렬의 원리  비교 연산을 통해 주어진 배열의 최솟값을 탐색 배열의 가장 앞에있는 원소와 최솟값을 교환 나머지 미정렬 부분을 가지고 위의 과정을 반복   선택정렬의 정렬 과정 배열의 크기 = n = 5,
최솟값의 인덱스 = least_index</description>
    </item>
    
    <item>
      <title>정렬 알고리즘 - 버블 정렬(Bubble Sort)</title>
      <link>https://xfrnk2.github.io/algorithm/bubble_sort/</link>
      <pubDate>Fri, 10 Jul 2020 00:08:44 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/algorithm/bubble_sort/</guid>
      <description>버블정렬의 원리와 특징 및 성능에 대해서 정리하는 글이다.
 &amp;lt;학습 목표&amp;gt;
 버블정렬의 원리를 이해한다. 버블정렬의 특징을 파악한다. 버블정렬의 성능을 기억한다. 모든 과정을 설명할 수 있다. 버블정렬을 프로그래밍 언어로 구현할 수 있다.    버블정렬의 원리  모든 인접한 값의 비교를 위해 왼쪽 또는 오른쪽에서 시작하여 반대편 끝으로 이동 인접한 두 값을 비교하여 왼쪽 값이 더 큰 경우 자리를 바꾸는 과정을 반복   버블정렬의 정렬 과정   가장 오른쪽 값(최댓값)부터 왼쪽 방향(최솟값 방향)으로 정렬되는 과정을 설명 비교연산의 기준이 되는 시작하는 위치는 가장 끝에서 가장 끝 바로 하나 전의 위치까지, 진행 방향으로 1씩 이동   배열의 크기 = n = 5</description>
    </item>
    
    <item>
      <title>BOJ-10814-나이순 정렬[정렬]</title>
      <link>https://xfrnk2.github.io/boj/10814/</link>
      <pubDate>Thu, 14 May 2020 18:21:50 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/10814/</guid>
      <description>BOJ-10814-나이순 정렬 문제 바로가기  나의 풀이 from operator import itemgetter arr = [list(map(lambda x: int(x) if x.isdecimal() else x, input().split()))+[i] for i in range(int(input()))] arr.sort(key=itemgetter(0, 2)) for x in arr: print(f&amp;quot;{x[0]} {x[1]}&amp;quot;) 순서  정수인지 확인해서 정수인 경우 int와 매핑 인덱스를 값 후열에 추가 1순위를 나이 기준, 2순위를 생성된 순서(=인덱스)로 정렬 나이와 이름 출력  방법  정수 확인을 isdecimal()을 사용 -&amp;gt;[참고링크 바로가기] operator.itemgetter를 사용, lambda 함수도 사용 가능  </description>
    </item>
    
    <item>
      <title>BOJ-10825-국영수[정렬]</title>
      <link>https://xfrnk2.github.io/boj/10825/</link>
      <pubDate>Tue, 21 Apr 2020 00:55:42 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/10825/</guid>
      <description>BOJ-10825-국영수 문제 바로가기  나의 풀이 student_list = [list(map(lambda x: int(x) if x.isdecimal() else x, input().split())) for _ in range(int(input()))] student_list.sort(key=lambda student: (-student[1], student[2], -student[3], student[0])) for x in student_list: print(x[0]) 생각  operator.itemgetter도 이용할수 있을까? 정수판별을 위해서 어떤 함수를 사용하는게 적절할까?  순서  input값의 문자열이 정수일 경우 정수화 정렬 실행 0번째 인덱스에 위치한 학생의 이름을 출력  방법  정수 판별을 위해 isdecimal 이용 lambda함수를 이용 정렬하고자 하는 인덱스를 역순으로 정렬하기 위해 머리부분에 -를 붙임.</description>
    </item>
    
    <item>
      <title>BOJ-1026-보물[정렬]</title>
      <link>https://xfrnk2.github.io/boj/1026/</link>
      <pubDate>Mon, 20 Apr 2020 00:22:17 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/1026/</guid>
      <description>BOJ-1026-보물 문제 바로가기  나의 풀이1 get_input = lambda:sorted(map(int, input().split())) get_input() print(sum(list(map(lambda x, y : x * y, get_input(), get_input()[::-1])))) 나의 풀이2 get_input = lambda:sorted(map(int, input().split())) get_input() print(sum(x*y for x, y in zip(get_input(), get_input()[::-1]))) 생각 reverse로 정렬하기보다 더 좋은방법이 없나 찾아본 결과 [::-1]이 가장 좋아보였다.
순서  정렬된 리스트를 얻어오는 함수를 작성 B를 역순으로 정렬 A와 B의 각각의 원소들을 곱한 리스트를 구한다. 구해진 리스트의 값을을 모두 더한 값을 반환한다.  방법  list와 map, lambda 함수를 이용해서 구현해 보았다.</description>
    </item>
    
  </channel>
</rss>