<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Rad Blog</title>
    <link>https://xfrnk2.github.io/tags/python/</link>
    <description>Recent content in Python on Rad Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Jun 2021 02:20:34 +0900</lastBuildDate>
    <atom:link href="https://xfrnk2.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python - 딕셔너리 원소의 갯수를 보다 효율적으로 counting하는 방법</title>
      <link>https://xfrnk2.github.io/python/python-counting_dictionary_elements_efficially/</link>
      <pubDate>Wed, 02 Jun 2021 02:20:34 +0900</pubDate>
      <guid>https://xfrnk2.github.io/python/python-counting_dictionary_elements_efficially/</guid>
      <description>Dictionary의 get 메소드를 활용하자. counts = dict()for i in items:counts[i] = counts.get(i, 0) + 1 시간복잡도적 측면에서 collections의 Counter보다 더 낫다. 출처 : 링크 </description>
    </item>
    <item>
      <title>Python - 많은 양의 데이터를 효율적으로 입력받는 방법</title>
      <link>https://xfrnk2.github.io/python/python-sys_stdin_readline/</link>
      <pubDate>Wed, 02 Jun 2021 02:19:34 +0900</pubDate>
      <guid>https://xfrnk2.github.io/python/python-sys_stdin_readline/</guid>
      <description>sys.stdin.readline() 많은 데이터 입력을 받고자 할 때는 sys.stdin.readline()을 사용하는 것이 유리하다.
(자바에서 Scanner보다 BufferedReader가 빠른것과 같은 맥락에서)
import sysraw_input = sys.stdin.readlineN = int(raw_input()) 덧붙여서, 위 코드에서 raw_input()은 함수를 담은 변수의 이름에 불과한데, Python 3부터는 raw_input이 없어지고 이것이 input()으로 이름이 바뀌었다. </description>
    </item>
    <item>
      <title>Python - Short Circuit Operator로서의 or, and 연산자</title>
      <link>https://xfrnk2.github.io/python/python-operator_or_and_and/</link>
      <pubDate>Mon, 05 Apr 2021 11:20:34 +0900</pubDate>
      <guid>https://xfrnk2.github.io/python/python-operator_or_and_and/</guid>
      <description> 연산 수식 x or y if x is false, then y, else x x and y if x is false, then x, else y 스위치를 이용해 값 병합할 때 사용 https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not </description>
    </item>
    <item>
      <title>Python - Python의 변수 할당 매커니즘</title>
      <link>https://xfrnk2.github.io/python/python-variables_machanism/</link>
      <pubDate>Mon, 05 Apr 2021 11:19:34 +0900</pubDate>
      <guid>https://xfrnk2.github.io/python/python-variables_machanism/</guid>
      <description>파이썬은 변수를 생성할 때 변수를 위한 메모리를 생성하는 방식이 아니라, 변수가 만들어지고 어떠한 값을 넣으면 변수가 그 값을 참조하는 형태이다. 변수에 상수 값을 할당하고자 해도 값이 변경되기 때문에 파이썬에서는 상수를 사용하지 않는다. 그 대신 클래스를 사용한 여러가지 방법으로 상수를 정의할 수는 있다.(FrozenSpace, SpaceFrozenValues, __slots__, property, metaclass 등, 또는 Python 3.8~ typing.Final(*그러나 재할당 가능)) from uuid import uuid4class obj:def __init__(self):self.__data = uuid4()self.__is_changed = False@propertydef data(self):return self.</description>
    </item>
    <item>
      <title>Python - Namedtuple과 dataclass 비교 정리</title>
      <link>https://xfrnk2.github.io/python/comparison_namedtuple_and_dataclass/</link>
      <pubDate>Wed, 18 Nov 2020 14:10:57 +0900</pubDate>
      <guid>https://xfrnk2.github.io/python/comparison_namedtuple_and_dataclass/</guid>
      <description> ＊NamedTuple은 tuple을 상속받았으며 tuple 구조는 c로 작성되었다. 그러므로 해시나 비교 등의 메서드가 빠르다.
＊dataclass는 dictionary에 기초하므로 장단점의 차이가 생긴다.
＊예를 들면 공간 사용은 tuple이 더 작으나, 액세스 속도는 dataclass가 더 빠르다.
＊따라서 원하는 데이터의 구조가 immutable하고, hashable, iterable, unpackable, comparable하다면 NamedTuple을 사용하는 편이 좋다. 그리고 예를들어 상속의 가능성 등 복잡한 구조를 원한다면 dataclass를 사용하는 편이 좋다.
참고 링크
https://stackoverflow.com/questions/51671699/data-classes-vs-typing-namedtuple-primary-use-cases </description>
    </item>
    <item>
      <title>Python - collections의 namedtuple과 typing의 NamedTuple 비교</title>
      <link>https://xfrnk2.github.io/python/comparison_namedtuple_and_namedtuple/</link>
      <pubDate>Wed, 18 Nov 2020 13:10:57 +0900</pubDate>
      <guid>https://xfrnk2.github.io/python/comparison_namedtuple_and_namedtuple/</guid>
      <description>코드 사용 예 - typing의 NamedTuple from typing import NamedTupleclass Employee(NamedTuple):name: strid: int 코드 사용 예 - collections의 namedtuple from collections import namedtupleEmployee = namedtuple(&amp;#39;Employee&amp;#39;, [&amp;#39;name&amp;#39;, &amp;#39;id&amp;#39;]) typing의 Namedtuple을 사용하는 편이 보다 자연스러운 인터페이스를 선언할 수 있다. collections의 namedtuple의 신버전이 typing의 NamedTuple이다.
typinng의 NamedTuple을 사용하면 좋은 점 type 이름을 두 번 반복 할 필요가 없다. ( 예시에서의 &amp;ldquo;Employee&amp;rdquo;) type을 사용자가 직접 정의 할 수 있다. (예 : 독 스트링 또는 일부 메소드 추가) -&amp;gt; NamedTuple의 하위 클래스가 아님 상속이 가능하다.</description>
    </item>
    <item>
      <title>Python - 특이점이 온 filter함수, list 안의 빈 값(None)을 제거하기</title>
      <link>https://xfrnk2.github.io/fft/python-filter_and_remove_none_in_list/</link>
      <pubDate>Tue, 06 Oct 2020 18:58:11 +0900</pubDate>
      <guid>https://xfrnk2.github.io/fft/python-filter_and_remove_none_in_list/</guid>
      <description>filter 함수의 특이점 발견 동기 레스토랑 시뮬레이션 코딩 중 작성한 코드의 일부이다.
(좋은 코드인지는 모르겠다.)
cooks = [cook if not cook.update() else finished_order.append(cook.order_info) for cook in self.__cooks]self.__cooks = list(filter(None, cooks)) else를 연산하는 과정에서 None이 원소로 들어가는 것을 확인,
None 원소들을 제거해주기 위한 방법을 검색해봤다. *list(filter(None, array))*의 형태로 쓰란다. 그래서 형태를 모방한 코드를 작성했는데&amp;hellip;. 그런데..
왜 이렇게 되지? 싶은, 크게 눈에 띈 부분이 있었다. 특이점 filter(적용시킬 함수, 적용시킬 요소들)의 형태로</description>
    </item>
    <item>
      <title>FFT in Python_비교연산을 수행할 때 하나라도라는 크거나 작은 값을 요구하는 조건이라면 any를 쓰자</title>
      <link>https://xfrnk2.github.io/fft/python-any/</link>
      <pubDate>Mon, 20 Jul 2020 13:34:33 +0900</pubDate>
      <guid>https://xfrnk2.github.io/fft/python-any/</guid>
      <description>Foot For Thought : 생각할 거리, -를 줄여서 FFT-
생각해볼 거리를 정리해서 글로 올리자는 취지로 카테고리를 &amp;lsquo;Food For Thought&amp;rsquo;라고 설정했다.ㅎㅎ
&amp;lsquo;Food For Thought&amp;rsquo;는 최근에 알게된 영어 표현으로 생각해볼 거리를 은유적으로 사용하는 범용적인 말이라고 한다.
사실 블로그에 글을 올려야겠다 생각하면서도 지나고 나면 까먹기 때문에 이번만큼은 즉각 올리기로 마음먹고 글을 쓰는 중이다.
각설하고, 본론으로 들어가자면 Python으로 코딩 테스트 연습 문제를 풀던 중에, &amp;ldquo;원소 중 하나라도 크거나 작은 것이 있다면&amp;quot;이라는 조건이 붙었을때 어떻게 하면 좋을지 생각해봤다.</description>
    </item>
    <item>
      <title>Django의 Admin 기능</title>
      <link>https://xfrnk2.github.io/django/django_admin/</link>
      <pubDate>Sun, 19 Apr 2020 18:03:29 +0900</pubDate>
      <guid>https://xfrnk2.github.io/django/django_admin/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
1. Django의 Admin 기능 관리자 페이지, 강력한 자동 관리 인터페이스 모델 중심의 빠른 인터페이스를 제공 2. Django Admin의 사용 효과 서비스 초기에 관리 도구로 사용하기에 제격 관리 도구 만들 시간을 줄이고, End-User 서비스에 집중이 가능 3. Model Class를 Django Admin에 등록하는 방법 1. 기본 from django.contrib import adminfrom .models import Item admin.site.regiester(Item) 2. Class from django.contrib import adminfrom .</description>
    </item>
  </channel>
</rss>
