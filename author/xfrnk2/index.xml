<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xfrnk2 on Rad Blog</title>
    <link>https://xfrnk2.github.io/author/xfrnk2/</link>
    <description>Recent content in xfrnk2 on Rad Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 11 May 2020 23:30:24 +0900</lastBuildDate>
    
	<atom:link href="https://xfrnk2.github.io/author/xfrnk2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>20.05.11_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.11/</link>
      <pubDate>Mon, 11 May 2020 23:30:24 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.11/</guid>
      <description>계획했던 일  데이터베이스 시스템 공부하기, 특히 SQL 공부하기 최대한 할 수 있는 만큼으로 데이터베이스 시스템 과제 하기 Django 강의 듣기 알고리즘 문제 풀기 독서하기  오늘 한 일  ER모델과 관계형 모델에 대해 복습했다. SQL 강의를 듣고 공부했다. 데이터베이스 시스템 과제를 했다. SQL을 사용하는 문제 하나만을 남겨두고 있다. 백준 알고리즘 분할정복 문제를 풀었다. 하지만 global을 사용했으니 다시 풀어보려고 한다. Django URL Dispatcher와 정규 표현식에 대한 강의를 들었다.   내일 할 일  지난 강의를 들으면서 공부한 내용을 복습하고 구조화하기 백준 알고리즘 분할정복 문제 다시 풀기 데이터베이스 시스템 과제 하기 Django 강의 듣기  </description>
    </item>
    
    <item>
      <title>20.05.10_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.10/</link>
      <pubDate>Sun, 10 May 2020 23:33:45 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.10/</guid>
      <description>계획했던 일  데이터베이스 시스템 과목 공부와 과제 하기 건강 신경쓰기   오늘 한 일  데이터베이스 시스템 ER 다이어그램, 관계형 모델, 데이터 연산에 대한 강의를 수강했다. 강의를 듣고 내용을 정리했다. 과제의 일부분을 끝냈다. 생각했던 것보다 시간이 많이 소요되었다. 요구사항에 맞춘 ER다이어그램과 관계형 모델을 처음으로 만들어 보았다. 도서 &amp;lsquo;지적 대화를 위한 넓고 얕은 지식&amp;rsquo; 을 (+10%)60% 읽었다. 한 연구결과 설명 동영상 을 기회 삼아 도서 &amp;lsquo;마시멜로 테스트&amp;rsquo;를 다시 보았다. 동영상에서 언급하길, 꿈을 이루려면 미래의 모습을 타인으로 느끼지말고 자신으로 느끼는 것부터 시작하라는 구절이 있었는데, 나에게 깊은 울림과 영감을 주었다.</description>
    </item>
    
    <item>
      <title>20.05.09_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.09/</link>
      <pubDate>Sat, 09 May 2020 23:44:52 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.09/</guid>
      <description> 데이터베이스 시스템 공부하기 데이터베이스 시스템 과목 과제 하기 독서하기 지나간 공부했던 내용들 복습하기(알고리즘 등)   오늘 한 일  소화기가 좋지 못해 산에 혼자 다녀왔다. 데이터베이스 시스템 - 관계형 모델의 강의를 3분의 2 시청하고 중요한 내용을 노트에 정리했다. 이전에 푼 백준(4949) 알고리즘 문제를 블로그에 올리며 정리했다.   내일 할 일  데이터베이스 시스템 과목 공부와 과제 하기 건강 신경쓰기  </description>
    </item>
    
    <item>
      <title>BOJ-4949-균형잡힌 세상[문자열 처리]</title>
      <link>https://xfrnk2.github.io/boj/4949/</link>
      <pubDate>Sat, 09 May 2020 00:48:07 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/4949/</guid>
      <description>BOJ-4949-균형잡힌 세상 문제 바로가기  나의 풀이 def get_result(sentence: str) -&amp;gt; bool: bracket_stack = [] for s in sentence: if s.isalpha(): continue elif s == &amp;quot;(&amp;quot;: bracket_stack.append(1) elif s == &amp;quot;[&amp;quot;: bracket_stack.append(0) elif s == &amp;quot;)&amp;quot; or s == &amp;quot;]&amp;quot;: try: if bracket_stack[-1] == 0 and s == &amp;quot;)&amp;quot;: return False elif bracket_stack[-1] == 1 and s == &amp;quot;]&amp;quot;: return False bracket_stack.pop() except IndexError: return False return not bracket_stack if __name__ == &#39;__main__&#39;: sentence_list = [] while True: get_input = input() if get_input == &#39;.</description>
    </item>
    
    <item>
      <title>20.05.08_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.08/</link>
      <pubDate>Fri, 08 May 2020 23:24:24 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.08/</guid>
      <description>계획했던 일  어버이날 기념 할머니 찾아뵙기 데이터베이스 시스템 공부와 학교 과제 이어서하기 행렬 덧셈과 곱셈 코드로 구현하기   오늘 한 일  어버이날 기념 할머니를 찾아뵙고 함께 식사했다. 행렬 덧셈과 곱셈을 Python 코드로 구현했다. 데이터베이스 시스템 과목 과제를 위해 데이터베이스 강의를 2편(2시간분)을 수강하고 중요한 내용을 노트에 정리하였다. 이 또한 블로그에 포스팅 해보는 것은 어떨까 싶은 생각이 들었다. 도서 &amp;lsquo;죽고 싶지만 떡볶이는 먹고싶어&amp;rsquo; 를 완독했다. 에세이라 술술 읽혔다.   내일 할 일  데이터베이스 시스템 공부하기 데이터베이스 시스템 과목 과제 하기 독서하기 지나간 공부했던 내용들 복습하기(알고리즘 등)  </description>
    </item>
    
    <item>
      <title>20.05.07_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.07/</link>
      <pubDate>Thu, 07 May 2020 23:53:23 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.07/</guid>
      <description>계획했던 일  학교 과제 하기 Django Queryset으로 간단한 검색, 정렬 기능 한번 더 구현하기(복습, 익숙해지기) Django 강의 듣기   오늘 한 일  Django 지금까지 배운 내용을 모두 복습하고 클론 코딩하였다. Django Queryset으로 간단한 검색, 정렬 기능 한번 더 구현하였다. Django 함수 기반 View에 대한 강의를 들었다. 도서 &amp;lsquo;지적 대화를 위한 넓고 얕은 지식&amp;rsquo; 을 (+25%)50% 읽었다. 학교 과제 하나를 선택해서 시작했고, 현재 진행 중이다.(데이터베이스 시스템) 앞으로 주어진 요구사항에 대한 ER 다이어그램 작성, 관계형 모델로 변환, 관계대수식 작성, 관계대수식을 SQL로 변환해야하는데 아직 이것들에 대해 공부하지 못했다.</description>
    </item>
    
    <item>
      <title>20.05.06_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.06/</link>
      <pubDate>Wed, 06 May 2020 23:07:12 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.06/</guid>
      <description>계획했던 일  행렬 이론 및 행렬 곱셈에 대한 이해의 깊이 더하기 또다른 학교 과제의 내용 조사하기 Django QuerySet으로 간단 검색, 정렬을 할 수 있도록 구현하기 독서하기 동적 프로그래밍 문제 풀기   오늘 한 일  Django Queryset의 정렬 및 범위조건에 대해 복습하고 정리해서 글을 올렸다. Django Queryset으로 간단한 검색, 정렬을 할 수 있도록 구현하였다. 백준 알고리즘중 동적 프로그래밍 문제를 풀었다. (14494) 행렬 이론 및 행렬 곱셈에 대한 자료들을 찾아보고 이해하였다.</description>
    </item>
    
    <item>
      <title>Django - Queryset의 정렬 및 범위조건</title>
      <link>https://xfrnk2.github.io/django/django_queryset_sort/</link>
      <pubDate>Wed, 06 May 2020 12:55:27 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_queryset_sort/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  정렬 조건 추가  일관된 순서를 보장받기 위해 정렬 조건을 추가 DB에서 다수 필드에 대한 정렬을 지원하나 가급적 단일 필드로 하는것이 성능에 이익 시간순/역순 정렬이 필요할때는 id필드를 활용   정렬 조건 지정 방법 1. (추천) 모델 클래스의 Meta 속성으로 ordering 설정 : list로 지정 2. 모든 queryset에 order_by(&amp;hellip;)에 지정  (주의) queryset코드에서 직접 order_by를 지정하면, Meta&amp;gt;ordering 설정값이 무시된다</description>
    </item>
    
    <item>
      <title>20.05.05_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.05/</link>
      <pubDate>Tue, 05 May 2020 23:35:24 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.05/</guid>
      <description>계획했던 일  LCS (최장 공통 부분 수열) 을 또다른 형태로 구현하기 또다른 학교 과제의 내용 조사하기 Django 배운 내용 문서화하기 행렬 곱셈을 이용한 피보나치 함수 구현을 위해, 행렬 기본 공부해보기   오늘 한 일  Django Migration을 통한 database 관리에 대해 복습하고 정리해서 글을 올렸다. LCS (최장 공통 부분 수열) 을 표준적인 방법으로 구현하였다. 행렬 이론에 대한 자료를 읽었다. 곱셈이 어떻게 이루어지는지를 더 면밀히 공부해야 할 것 같다.   내일 할 일  행렬 이론 및 행렬 곱셈에 대한 이해의 깊이 더하기 또다른 학교 과제의 내용 조사하기 Django QuerySet으로 간단 검색, 정렬을 할 수 있도록 구현하기 독서하기 동적 프로그래밍 문제 풀기  </description>
    </item>
    
    <item>
      <title>Django - Migration을 통한 database 스키마 관리</title>
      <link>https://xfrnk2.github.io/django/django_migartion/</link>
      <pubDate>Tue, 05 May 2020 14:14:58 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_migartion/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  Migrations  모델의 변경내역을 &amp;ldquo;데이터베이스 스키마&amp;quot;로 반영시키는 효율적인 방법 제공  관련 명령: 마이그레이션 파일 생성 &amp;gt; python manage.py makemigrations &amp;lt;앱이름&amp;gt; 지정 데이터베이스에 마이그레이션 적용 &amp;gt; python manage.py migrate &amp;lt;앱이름&amp;gt; 마이그레이션 적용 현황 출력 &amp;gt; python manage.py showmigrations &amp;lt;앱이름&amp;gt; 지정 마이그레이션의 SQL 내역 출력 &amp;gt; python manage.py sqlmigrate &amp;lt;앱이름&amp;gt; &amp;lt;Migration 이름&amp;gt;  Migration File 기능  모델의 변경내역을 누적 테이블 생성/삭제, 필드 추가/삭제 등 데이터베이스에 어떤 변화를 가하는 Operation들을 나열 Custom Python/SQL Operation (data migration 등) makemigrations 명령에 의해 모델로부터 자동 생성 모델 참조 없이 빈 Migration File을 만들어서 직접 채워 넣는 것도 가능  주의할 점  같은 Migration 파일이라도 DB 종류에 따라 다른 SQL이 생성됨 모든 데이터 베이스 엔진들이 같은 기능을 제공하지는 않음 적용된 마이그레이션 파일은 절대로 삭제해서는 안됨   의도에 맞게 Migration 파일이 생성되었는지 확인하는 것이 무엇보다 중요</description>
    </item>
    
    <item>
      <title>20.05.04_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.04/</link>
      <pubDate>Mon, 04 May 2020 23:43:22 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.04/</guid>
      <description>계획했던 일  Django 배운 내용 문서화하기 LCS (최장 공통 부분 수열) 을 또다른 형태로 구현하기 분할 정복, 동적 프로그래밍, 그리디 알고리즘의 대표적인 예에 대해서 조사하기   오늘 한 일  Django ManyToManyField 에 대해 복습하고 정리해서 글을 올렸다. Django OneToOneField 에 대해 복습하고 정리해서 글을 올렸다. 도서 &amp;lsquo;지적 대화를 위한 넓고 얕은 지식&amp;rsquo; 을 어제 읽었던 부분을 다시 한 번 읽었다. 결과적으로 어제 이상으로 읽은 것은 10페이지 정도였다. 분할 정복, 동적 프로그래밍, 그리디 알고리즘의 대표적인 예에 대해서 조사한 내용을 정리 후 문서화했다.</description>
    </item>
    
    <item>
      <title>Django - 관계를 표현하는 Model Field - ManyToManyField</title>
      <link>https://xfrnk2.github.io/django/django_manytomanyfield/</link>
      <pubDate>Mon, 04 May 2020 12:24:08 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_manytomanyfield/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  ManyToManyField M : N 관계에서 어느쪽이라도 필드 지정 가능 ManyToManyField(to, blank=Flase)  on_delete 옵션이 없고 blank라는 옵션을 유의미하게 사용
예 ) 태그 지정에 대한 유효성 검사 ForeignKey 관계와 OneToOneField 관계에서는 두개의 모델만 있으면 충분하지만,
ManyToManyField 관계에서는 두개의 테이블만으론 관계를 정의할 수 없기에 중간 테이블이 필요 (별도의 지정 및 정의도 가능)  방법 1 (권장) class Post(models.Model): tag_set = models.</description>
    </item>
    
    <item>
      <title>Django - 관계를 표현하는 Model Field - OneToOneField</title>
      <link>https://xfrnk2.github.io/django/django_onetoonefield/</link>
      <pubDate>Mon, 04 May 2020 11:11:59 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_onetoonefield/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  OneToOneField 1 : 1 관계에서 어느 쪽이라도 가능  User:Profile  ForeignKey(unique_True)와 유사하지만, reverse 차이  User:Profile를 ForeignKey로 지정한다면 -&amp;gt; profile.user_set.first() -&amp;gt; user User:Profile를 OneToOneField로 지정한다면 -&amp;gt; profile.user -&amp;gt; user  OneToOneField(to, on_delete) #django/contrib/auth/models.py class User(abstractBaseUser): ... # accounts/models.py class Profile(models.Model): author = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE) https://docs.djangoproject.com/en/3.0/ref/models/fields/#onetoonefield
 OneToOneField에서의 related_name reverse 접근 시의 속성명 : 디폴트 -&amp;gt; 모델명소문자 accounts/models.py class Profile(models.</description>
    </item>
    
    <item>
      <title>20.05.03_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.03/</link>
      <pubDate>Sun, 03 May 2020 22:10:50 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.03/</guid>
      <description>계획했던 일  LCS (최장 공통 부분 수열) 알고리즘에 대해서 더 공부하기 독서하기 Django 배운 내용 문서화하기   오늘 한 일  도서 &amp;lsquo;지적 대화를 위한 넓고 얕은 지식&amp;rsquo; 을 읽기 시작해서 20%정도 읽었다. 파이썬 사용자모임 단톡방에 올라온 질문들에 대해 답변을 남겼다. (리스트 열과 행의 합, 팩토리얼, Counter, 리스트 컴프리헨션) 그로부터 파생된 것들을 공부하는 시간을 보냈다. 딕셔너리의 값 기준 정렬 방법에 대해 알아봤다.  1. Counter(list).most_common(number) 2. result = sorted(arr.</description>
    </item>
    
    <item>
      <title>Django - Model Field</title>
      <link>https://xfrnk2.github.io/django/django_model_field/</link>
      <pubDate>Sat, 02 May 2020 23:19:28 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_model_field/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  ORM  ORM은 어디까지나, SQL 생성을 도와주는 라이브러리 DB에 대한 모든 것을 알아서 처리해주진 않음   보다 성능높은 어플리케이션을 만들고자 한다면 사용할 DB엔진과 SQL에 대한 높은 이해 필요
  RDMBS에서의 관계 예시 1 : N 관계 -&amp;gt; Foreign Key  1명의 유저(User)가 쓰는 다수의 포스팅(Post) 1명의 유저(User)가 쓰는 다수의 댓글(Comment) 1개의 포스팅(Post)에 다수의 댓글(Comment)  1 : 1 관계 -&amp;gt; models.</description>
    </item>
    
    <item>
      <title>Django - 관계를 표현하는 Model Field - Foreign Key</title>
      <link>https://xfrnk2.github.io/django/django_foreignkey/</link>
      <pubDate>Sat, 02 May 2020 23:07:21 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_foreignkey/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  ForeignKey(to, on_delete)  1:N의 관계에서 N측에 명시  to  대상모델, 클래스 직접 지정 또는 클래스명을 문자열로 지정 자기 참조는 &amp;lsquo;self&amp;rsquo; 지정  on_delete : Record 삭제시 Rule  CASCADE : 장고 1.x에서의 디폴트값 / 주로 CASCADE를 사용, FK를 참조하는 다른 모델의 Record도 삭제 PROTECT : ProtectedError (IntegrityError 상속) 를 발생시키며 삭제 방지 SET_NULL : null로 대체, 필드에 null=True 옵션 필수 SET_DEFAULT : 디폴트 값으로 대체, 필드에 디폴트값 지정 필수 SET : 대체할 값이나 함수를 지정, 함수의 경우 호출하여 리턴값을 사용 DO_NOTHING : 어떠한 액션X, DB에 따라 오류 발생 가능성   올바른 모델 지정 방법 권장하지 않는 방법의 예시 #models from django.</description>
    </item>
    
    <item>
      <title>Django debug-toolbar를 통한 SQL 디버깅</title>
      <link>https://xfrnk2.github.io/django/django_debug_toolbar_sql/</link>
      <pubDate>Sat, 02 May 2020 22:12:14 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_debug_toolbar_sql/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  django-debug-toolbar  현재 request/response에 대한 다양한 디버깅 정보를 보여주고 다양한 패널을 지원 응답 포맷이 HTML일 때만 가능 SQLPanel을 통해 각 요청 처리시에 발생한 SQL 내역을 확인 가능 Ajax 요청에 대한 지원은 불가능   django-debug-toolbar 설치 설치 공식문서  https://django-debug-toolbar.readthedocs.io/en/latest/installation.html  주의사항  웹페이지의 템플릿에 필히 body 태그가 있어야만, django-debug-toolbar가 동작   이유 : dbt의 html/script 디폴트 주입 타겟이 /body 태그 (INSERT_BEFORE 설정 디폴트: &amp;ldquo;/body&amp;rdquo;)</description>
    </item>
    
    <item>
      <title>20.05.02_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.02/</link>
      <pubDate>Sat, 02 May 2020 22:10:50 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.02/</guid>
      <description>계획했던 일  성공과 실패를 결정하는 1%의 네트워크 원리 책 읽기 LCS (최장 공통 부분 수열) 알고리즘에 대해서 더 공부하기 Django 배운 내용 문서화하기   오늘 한 일  Django debug-toolbar에 대한 내용을 복습하고 정리해서 글을 올렸다. Django 관계를 표현하는 Model Field, Foreign Key에 대한 내용을 복습하고 정리해서 글을 올렸다.    강의를 들은지 얼마 지난것을 다시 복습하고 정리하려고 하니 머릿속에 그려지는 동안 또다시 시간이 소비된다. 블로그에 글을 쓰다보니 복습을 잘 할 수 있어서 좋으나 한편으로는 복습에 시간을 쏟으며 세월아네월아 하게 되는게 아닌가 싶기도 하다.</description>
    </item>
    
    <item>
      <title>20.05.01_TIL</title>
      <link>https://xfrnk2.github.io/til/20.05.01/</link>
      <pubDate>Fri, 01 May 2020 11:13:20 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.05.01/</guid>
      <description>계획했던 일  성공과 실패를 결정하는 1%의 네트워크 원리 책 읽기 백준 알고리즘 문제 (1904번 01타일) 해결을 고민하기 수열과 조합, 등차수열 공부해보기 학교 과제 시작하기   오늘 한 일  칸아카데미 사이트에서 수열관련 강의 초입부분을 수강했다. LCS (최장 공통 부분 수열) 알고리즘을 이해했다. 사실 어려웠다.ㅜㅜ 분할 정복, 동적 프로그래밍, 그리디 알고리즘의 기본적인 개념을 복습하여 인지했다. 점심 식사 시간에 JTBC 토크멘터리 &amp;lsquo;이어령 선생이 젊은이에게 바치는 마지막 이야기&#39;를 보았는데 유독 &amp;lsquo;Momento Mori&#39;라는 문구가 머릿속을 맴돌았다.</description>
    </item>
    
    <item>
      <title>20.04.30_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.30/</link>
      <pubDate>Thu, 30 Apr 2020 23:07:21 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.30/</guid>
      <description>계획했던 일  Django 강의 많이 듣고 진도 나가기 성공과 실패를 결정하는 1%의 네트워크 원리 책 읽기 백준 알고리즘 문제 (1904번 01타일) 해결을 고민하기 수열과 조합, 등차수열 공부해보기   오늘 한 일  Django Model을 통한 조회 기초를 복습하고 문서화했다. 문서화 한 것을 업로드했다. Django Debug Toolbar를 설치하고 구현해보았다. 라이브 아카데미 동영상을 시청하고 공부했다.   내일 할 일  성공과 실패를 결정하는 1%의 네트워크 원리 책 읽기 백준 알고리즘 문제 (1904번 01타일) 해결을 고민하기 수열과 조합, 등차수열 공부해보기 학교 과제 시작하기   </description>
    </item>
    
    <item>
      <title>Django Model을 통한 조회 (기초)</title>
      <link>https://xfrnk2.github.io/django/django_model_basic/</link>
      <pubDate>Thu, 30 Apr 2020 11:59:38 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_model_basic/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  Model Manager SELECT * FROM app_model;
ModelCls.objects.all() SELECT * FROM app_model ORDER BY id DESC LIMIT 10;
ModelCls.objects.all().order_by(&#39;-id&#39;)[:10] INSERT INTO app_model (title) VALUES (&amp;ldquo;New Title&amp;rdquo;);
ModelCls.objects.create(title=&amp;quot;New Title&amp;quot;)  Queryset Chaining을 지원  Post.objects.all().filter(&amp;hellip;).exclude(&amp;hellip;).filter(&amp;hellip;) -&amp;gt; QuerySet
 Lazy한 특성  QuerySet을 만드는 동안에 DB 접근 X
실제로 데이터가 필요한 시점에 접근
 데이터가 필요한 시점  queryset print(queryset) list(queryset) for instance in queryset: print(instance)   &amp;ldquo;I/O의 경우 파일 접근은 많이 하지 않고, 대개 데이터베이스 접근이기 때문에, DB QuerySet에 대한 명확한 이해가 성능향상을 도움&amp;rdquo;</description>
    </item>
    
    <item>
      <title>20.04.29_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.29/</link>
      <pubDate>Wed, 29 Apr 2020 23:39:48 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.29/</guid>
      <description>오늘 한 일  어제에 이어서 영어 표현들을 복습했다. Django 쉘을 다룬 내용을 복습하고 정리해서 글을 올렸다. 백준 알고리즘 문제를 풀었다. (2748번 피보나치 수2) 1904번 문제(01타일)을 풀었는데 시간초과가 나왔다. 앞의 문제와 마찬가지로 동적 프로그래밍을 사용하는 문제였다. 관련 자료들을 검색하다보니 수열과 조합, 등차수열을 배워야 할 것만 같았다. 부자의 독서 책을 약 50% 읽었다. 이따금 접속하던 Okky 사이트의 모바일 앱을 설치했다. 주로 신입 개발자의 직장생활 고충과 그에 관한 팁들을 다루는 내용의 글들을 읽었다.</description>
    </item>
    
    <item>
      <title>Django Shell</title>
      <link>https://xfrnk2.github.io/django/django_shell/</link>
      <pubDate>Wed, 29 Apr 2020 14:27:36 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_shell/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  Shell  Ipython : 기본 패키지에 포함되지 않음, 별도의 설치가 필요 Jupyter Notebook : Ipython의 웹버전, 웹상에서 코드가 동작, 이미지와 차트 등이 활용 가능, 분석 또는 머신러닝에서 사용 BPython   장고 프로젝트 설정이 로딩된 파이썬 쉘   쉘 : python manage.py shell
  우선순위 : ipython 쉘, bpython 쉘, python 쉘
  옵션 :   -i (&amp;ndash;interface) : 인터프리터 인터페이스 커스텀 지정</description>
    </item>
    
    <item>
      <title>Django Static &amp; Media 파일</title>
      <link>https://xfrnk2.github.io/django/django_static_media_file/</link>
      <pubDate>Tue, 28 Apr 2020 23:25:41 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_static_media_file/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  Static &amp;amp; Media 파일  Static 파일 : 개발 리소스로서의 정적인 파일(js, css, image 등) 앱 또는 프로젝트 단위로 저장 및 서빙   Media 파일 (장고에만 있는)  FileField/ImageField를 통해 저장한 모든 파일 DB필드에는 저장 경로를 저장하며, 파일은 파일 스토리지에 저장 실제로 문자열을 저장하는 필드(중요) -&amp;gt; 파일은 스토리지에 저장, 경로 문자열이 저장 프로젝트 단위로 저장 및 서빙   Media 파일 처리 순서  HttpRequest.</description>
    </item>
    
    <item>
      <title>20.04.28_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.28/</link>
      <pubDate>Tue, 28 Apr 2020 23:14:19 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.28/</guid>
      <description>오늘 한 일  독서실에 갔다. 그동안 정리해둔 약 300여개의 영어 표현들을 반복 학습했다. Django 함수 기반 뷰 강의를 들었다. 백준 알고리즘 문제를 풀었다. (1003번 피보나치함수) 동적프로그래밍 기법을 활용하는 문제였는데, 나는 dictionary를 사용해서 풀었는데 남들은 배열을 사용해서 푼 경우가 많았다. YES24 북클럽에 결제했다. 부자의 독서 책을 읽기 시작했다. 앞으로 3일에 한권 읽는 것이 목표이다. Django의 Media파일 &amp;amp; Static 파일에 대해 학습한 내용을 가지고 복습하고 정리해서 글을 올렸다. 기간까지는 아직 정하지 못했으나 파이썬으로 미니게임을 만들어 볼 예정이다.</description>
    </item>
    
    <item>
      <title>20.04.27_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.27/</link>
      <pubDate>Mon, 27 Apr 2020 11:27:50 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.27/</guid>
      <description>오늘 한 일  Django 마이그레이션을 통한 데이터베이스 스키마 관리 강의를 들었다. 백준 알고리즘 문제를 풀었다.(트리 순회-1991번 문제) 트리 순회에 대해 복습했다. 비교적 최신 글, 웹 개발자 로드맵에 대한 자료를 봤다. (링크)   오늘부터 독서실을 다니기 시작했다.
그저 열심히 공부하기보다는 계획적이고 지혜롭게 공부하는 편이 좋을 것이라 생각이 들었다. 그래서 앞으로 해 갈 것들을 간추렸다.
 영어 공부 ( 7월까지 500개 어휘, 표현 학습 목표 ) 리눅스와 자바스크립트 수강 시작하기 Django 강의내용 구조화 &amp;amp; 정리 후 블로그 포스팅하기 파이썬으로 미니게임 만들기 +새로운 정보나 소식 글 읽기(국내 개발자 커뮤니티 참조)   내일 할 일  독서실 가기 Django 강의 듣기 국내 개발자 커뮤니티 탐방하기 파이썬으로 미니게임 만들기 프로젝트 시작하기   </description>
    </item>
    
    <item>
      <title>20.04.26_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.26/</link>
      <pubDate>Sun, 26 Apr 2020 11:06:55 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.26/</guid>
      <description> 객체지향의 사실과 오해 책을 읽었다.   </description>
    </item>
    
    <item>
      <title>20.04.25_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.25/</link>
      <pubDate>Sat, 25 Apr 2020 01:17:02 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.25/</guid>
      <description> 몸상태가 좋지 않아 쉬는 시간을 가졌다. 아무것도 안할 수는 없으니 백준 알고리즘 문제를 하나 풀었다.   내일 할 일  내일은 약속이 있어 외출을 하지만 이동중 객체지향의 사실과 오해 책을 읽겠다.   </description>
    </item>
    
    <item>
      <title>20.04.24_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.24/</link>
      <pubDate>Fri, 24 Apr 2020 01:31:15 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.24/</guid>
      <description> Django 강의 수강이후로 배웠던 내용들을 한꺼번에 복습하였다.   내일 할 일  그간 학습한 내용을 정리하고 구조화 하기. 그간의 학습 내용을 가지고 Django를 통해 직접 코드를 작성해서 구현한 나만의 사이트 만들기.   </description>
    </item>
    
    <item>
      <title>20.04.23_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.23/</link>
      <pubDate>Thu, 23 Apr 2020 02:16:56 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.23/</guid>
      <description> Django 관계를 표현하는 모델 필드(ForeignKey, OneToOneField)에 대한 강의를 들었다. 어제 풀지 못한 알고리즘 문제를 풀었다. 백준 온라인 저지 알고리즘 문제를 2가지 풀었다.   내일 할 일  오늘 학습한 내용을 정리하고 구조화 하기. 블로그 사용법 분명하게 익히기. 배웠던 내용을 가지고 Django 연습하기.   </description>
    </item>
    
    <item>
      <title>20.04.22_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.22/</link>
      <pubDate>Wed, 22 Apr 2020 02:07:45 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.22/</guid>
      <description> Django 모델을 통한 정리방법 및 media파일을 다루는 방법에 대해서 정리 및 복습하였다. Django-debug-toolbar, Django 관계를 표현하는 모델 필드 강의를 들었다. 알고리즘 문제 하나를 가지고 다 풀지 못했다. 네트워크 원리 책을 읽었다.   내일 할 일  Django Queryset을 통한 간단 검색 구현, Queryset의 정렬 및 범위 조건 강의 듣고 공부하기. 풀지 못한 알고리즘 문제 문제 해결하기.   </description>
    </item>
    
    <item>
      <title>20.04.21_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.21/</link>
      <pubDate>Tue, 21 Apr 2020 02:45:59 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.21/</guid>
      <description>오늘은 다른날보다 몸상태가 좋지 않았다. 그래서 쉬는 시간도 가졌다.
 python decorator의 작동 원리와 wraps의 사용법을 공부했다. 그저께 풀었던 백준 알고리즘 문제를 다른 방법으로 풀어보고 결과적으로는 더 간명하게 만들었다. 풀었던 알고리즘 문제를 블로그에 업로드했다. Django 모델을 통한 조회(기초)와 Shell 사용 강의를 들었다.   내일 할 일  Django Queryset을 통한 간단 검색 구현, Queryset의 정렬 및 범위 조건 강의 듣고 공부하기. 알고리즘 문제 풀기 다음으로 읽을 개발관련서적 알아보기   </description>
    </item>
    
    <item>
      <title>BOJ-10825-국영수[정렬]</title>
      <link>https://xfrnk2.github.io/boj/10825/</link>
      <pubDate>Tue, 21 Apr 2020 00:55:42 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/10825/</guid>
      <description>BOJ-10825-국영수 문제 바로가기  나의 풀이 student_list = [list(map(lambda x: int(x) if x.isdecimal() else x, input().split())) for _ in range(int(input()))] student_list.sort(key=lambda student: (-student[1], student[2], -student[3], student[0])) for x in student_list: print(x[0]) 생각  operator.itemgetter도 이용할수 있을까? 정수판별을 위해서 어떤 함수를 사용하는게 적절할까?  순서  input값의 문자열이 정수일 경우 정수화 정렬 실행 0번째 인덱스에 위치한 학생의 이름을 출력  방법  정수 판별을 위해 isdecimal 이용 lambda함수를 이용 정렬하고자 하는 인덱스를 역순으로 정렬하기 위해 머리부분에 -를 붙임.</description>
    </item>
    
    <item>
      <title>20.04.20_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.20/</link>
      <pubDate>Mon, 20 Apr 2020 00:56:38 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.20/</guid>
      <description>생각보다 책을 오래 읽었다. 이제 절반정도 읽었다. 읽으면서 차츰차츰 네트워크의 구조가 인지되고 그려진다. 다 읽을때 즈음에는 보다 선명하게 머릿속에 남아있으면 좋겠다. 기술서적은 한번 보고 끝나는게 아니라 보고 또 보면서 머릿속에 구조를 각인시켜야 좋은 것 같다. 책을 읽다보니 반성이 된다.
블로그 글을 작성하기 앞서 블로그 템플릿에 익숙하지 못한 관계로 올리고 싶은 이미지를 올릴 수 없었다. 어차피 블로그를 운영하려면 계속 배울 수 밖에 없다. 그래도 재밌다.
배웠던 DjangoAdmin의 기능을 문서로 정리해서 글을 작성하였다.</description>
    </item>
    
    <item>
      <title>BOJ-1026-보물[정렬]</title>
      <link>https://xfrnk2.github.io/boj/1026/</link>
      <pubDate>Mon, 20 Apr 2020 00:22:17 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/1026/</guid>
      <description>BOJ-1026-보물 문제 바로가기  나의 풀이1 get_input = lambda:sorted(map(int, input().split())) get_input() print(sum(list(map(lambda x, y : x * y, get_input(), get_input()[::-1])))) 나의 풀이2 get_input = lambda:sorted(map(int, input().split())) get_input() print(sum(x*y for x, y in zip(get_input(), get_input()[::-1]))) 생각 reverse로 정렬하기보다 더 좋은방법이 없나 찾아본 결과 [::-1]이 가장 좋아보였다.
순서  정렬된 리스트를 얻어오는 함수를 작성 B를 역순으로 정렬 A와 B의 각각의 원소들을 곱한 리스트를 구한다. 구해진 리스트의 값을을 모두 더한 값을 반환한다.  방법  list와 map, lambda 함수를 이용해서 구현해 보았다.</description>
    </item>
    
    <item>
      <title>Django의 Admin 기능</title>
      <link>https://xfrnk2.github.io/django/django_admin/</link>
      <pubDate>Sun, 19 Apr 2020 18:03:29 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/django/django_admin/</guid>
      <description>이진석 선생님의 리액트와 함께 장고 시작하기 수강중 정리한 글입니다.
  1. Django의 Admin 기능  관리자 페이지, 강력한 자동 관리 인터페이스 모델 중심의 빠른 인터페이스를 제공   2. Django Admin의 사용 효과  서비스 초기에 관리 도구로 사용하기에 제격 관리 도구 만들 시간을 줄이고, End-User 서비스에 집중이 가능   3. Model Class를 Django Admin에 등록하는 방법 1. 기본 from django.contrib import admin from .models import Item admin.</description>
    </item>
    
    <item>
      <title>20.04.19_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.19/</link>
      <pubDate>Sun, 19 Apr 2020 01:26:11 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.19/</guid>
      <description>평소라면 아침에 일어나면 책부터 읽으려고 하는 편인데, 오늘은 왠지 모르게 오래도록 방치해둔 github와 travis-ci간의 오류를 해결하고 싶다는 생각이 들었다.
makefile을 통해 VENV 실행할 때, Windows/Linux 각 OS별로 작동하는 겸용 스크립트를 작성하는 것이었다.
그동안 나는 Python을 통해 코딩 퀴즈만 풀어왔었기 때문에 다른 영역의 것들을 쉽게 건드릴 수가 없었다. 뭘 모르는지를 몰랐다. travis-ci를 연동시키고 언젠가는 해야겠지 하면서 차일피일 미루었었다. 틈틈이 해결하기 위해 씨름해본적이 있는데 매번 해결하지 못했다.
그동안 문제를 해결할 때 일관된 방식으로 빠르게 답을 찾으려고만 했던것 같아서, 작은 것부터 알아갈 필요가 있다고 느꼈다.</description>
    </item>
    
    <item>
      <title>20.04.18_TIL</title>
      <link>https://xfrnk2.github.io/til/20.04.18/</link>
      <pubDate>Sat, 18 Apr 2020 00:05:09 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.18/</guid>
      <description>그저께부터 다시 &amp;lsquo;성공과 실패를 결정하는 1%의 네트워크 원리&amp;rsquo; 책을 읽고 있다.
마침 Django를 공부와 함께 웹에 대한 이해도를 높이고 싶었기 때문이다. 이 책은 구매해두고 몇번인가 반복적으로 읽었으나 피부에 와닿지는 못했다. 이번 기회로 직접적인 경험과 더불어 네트워크에 대한 이해도도 높일 수 있으면 좋겠다.
블로그를 시작한 가장 큰 이유는 배우고 지나간 것들을 내 자신이 자주 복습하지 않기 때문에 의식적으로 정리하고 활용하기 위해서이다.
그리고 당시에는 열심히 찾아보고 해결했던 문제조차 얼마 시간이 지나지 않았음에도 불구하고 휘발성 지식인 것처럼 날라가는 일을 여러번 겪었기 때문이다.</description>
    </item>
    
    <item>
      <title>TIL을 처음으로 시작합니다</title>
      <link>https://xfrnk2.github.io/til/20.04.17/</link>
      <pubDate>Fri, 17 Apr 2020 23:55:33 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/til/20.04.17/</guid>
      <description>오늘부터 새롭게 배우거나 느낀 것들을 정리하여 기록하는 작업을 시작합니다.</description>
    </item>
    
  </channel>
</rss>