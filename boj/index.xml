<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bojs on Rad Blog</title>
    <link>https://xfrnk2.github.io/boj/</link>
    <description>Recent content in Bojs on Rad Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 06 Jun 2022 00:22:17 +0900</lastBuildDate>
    
	<atom:link href="https://xfrnk2.github.io/boj/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>BOJ-1002- 터렛[기하학]</title>
      <link>https://xfrnk2.github.io/boj/1002/</link>
      <pubDate>Mon, 06 Jun 2022 00:22:17 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/1002/</guid>
      <description>BOJ-1002-터렛 문제 바로가기  1002 터렛 어떻게 풀어야하나 조차 몰라 두 원의 위치관계를 검색하여 유튜브를 통해 이해하고 납득하여 풀 수 있었던 문제.
고등학교 수학 개념인지 중학교 수학 개념인지 모르겠으나 내가 모르고 있던 것이였기에 공부를 해야만 했고, 앞으로 기하학 분류의 문제는 이러한 문제들이 더 나올것이라는 생각을 하니 미리미리 대비해둔다는 차원에서 수학과 기하학 문제를 더 접해봐야겠다는 생각이 들었다.
아래의 강의가 큰 도움이 됬다.
https://www.youtube.com/watch?v=yYApAGIfLlo
두 원의 위치관계
 외접 내접 두 원이 두개의 점에서 교차할 때 두 원 모두 서로의 외부에 있을 때 하나의 원 안에 다른 하나의 원이 있을 때  import math def turret(input_values) -&amp;gt; None: x1, y1, r1, x2, y2, r2 = list(map(int, input_values.</description>
    </item>
    
    <item>
      <title>BOJ-1004-어린 왕자[수학, 기하학]</title>
      <link>https://xfrnk2.github.io/boj/1004/</link>
      <pubDate>Sun, 05 Jun 2022 00:22:17 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/1004/</guid>
      <description>BOJ-1004-어린 왕자 문제 바로가기  1004 어린 왕자 처음에 어떻게 풀어야하는지 상당히 막연했지만 다행히도 문제를 이해하고 납득하며 작성하여 넘어갈 수 있었다. 꼭 다시한 번 풀어봤으면 하는 문제.
t = int(input()) for _ in range(t): x1, y1, x2, y2 = list(map(int, input().split())) count = 0 n = int(input()) for i in range(n): cx, cy, cr = list(map(int, input().split())) # 행성의 중심 좌표와 출발점, 시작점 사이의 거리를 구한다. dis1 = (x1 - cx) ** 2 + (y1 - cy) ** 2 dis2 = (x2 - cx) ** 2 + (y2 - cy) ** 2 pow_cr = cr ** 2 # 두 거리가 모두 행성의 반지름보다 작으면 출발점과 시작점 둘다 행성 내부에 위치한다.</description>
    </item>
    
    <item>
      <title>BOJ-1874-스택 수열[스택]</title>
      <link>https://xfrnk2.github.io/boj/1874/</link>
      <pubDate>Sat, 04 Jun 2022 00:22:17 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/1874/</guid>
      <description>BOJ-1874-스택 수열 문제 바로가기  1874 스택 수열 Before, 실패하는 코드
def stack_sequence(input_value_n: str, input_value_numbers: str) -&amp;gt; None: n = int(input_value_n) numbers = list(map(int, input_value_numbers.split())) stack = [] number = 0 next_number = 0 r = [] ans = [] for i in range(n): pivot = numbers[i] if number &amp;lt; pivot: while number &amp;lt; pivot: number += 1 if next_number &amp;lt;= number: stack.append(number) ans.append(&amp;#39;+&amp;#39;) next_number = number + 1 elif number &amp;gt; pivot: while number &amp;gt; pivot + 1: number -= 1 ans.</description>
    </item>
    
    <item>
      <title>BOJ-1991-트리순회[트리순회]</title>
      <link>https://xfrnk2.github.io/boj/1991/</link>
      <pubDate>Thu, 14 May 2020 18:22:50 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/1991/</guid>
      <description>BOJ-1991-트리순회 문제 바로가기  나의 풀이 def pre_order(node): print(node.item, end=&#39;&#39;) if node.left_child != &#39;.&#39;: pre_order(tree[node.left_child]) if node.right_child != &#39;.&#39;: pre_order(tree[node.right_child]) def in_order(node): if node.left_child != &#39;.&#39;: in_order(tree[node.left_child]) print(node.item, end=&#39;&#39;) if node.right_child != &#39;.&#39;: in_order(tree[node.right_child]) def post_order(node): if node.left_child != &#39;.&#39;: post_order(tree[node.left_child]) if node.right_child != &#39;.&#39;: post_order(tree[node.right_child]) print(node.item, end=&#39;&#39;) class Node: def __init__(self, item, left_child, right_child): self.item = item self.left_child = left_child self.right_child = right_child if __name__ == &#39;__main__&#39;: tree = {} for _ in range(int(input())): data = input().</description>
    </item>
    
    <item>
      <title>BOJ-10814-나이순 정렬[정렬]</title>
      <link>https://xfrnk2.github.io/boj/10814/</link>
      <pubDate>Thu, 14 May 2020 18:21:50 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/10814/</guid>
      <description>BOJ-10814-나이순 정렬 문제 바로가기  나의 풀이 from operator import itemgetter arr = [list(map(lambda x: int(x) if x.isdecimal() else x, input().split()))+[i] for i in range(int(input()))] arr.sort(key=itemgetter(0, 2)) for x in arr: print(f&amp;quot;{x[0]} {x[1]}&amp;quot;) 순서  정수인지 확인해서 정수인 경우 int와 매핑 인덱스를 값 후열에 추가 1순위를 나이 기준, 2순위를 생성된 순서(=인덱스)로 정렬 나이와 이름 출력  방법  정수 확인을 isdecimal()을 사용 -&amp;gt;[참고링크 바로가기] operator.itemgetter를 사용, lambda 함수도 사용 가능  </description>
    </item>
    
    <item>
      <title>BOJ-18870-좌표압축[알고리즘]</title>
      <link>https://xfrnk2.github.io/boj/18870/</link>
      <pubDate>Thu, 14 May 2020 18:20:50 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/18870/</guid>
      <description>BOJ-18870-좌표압축 문제 바로가기  나의 풀이 input() arr = list(map(int, input().split())) values_by_key = {} for i,j in enumerate(sorted(set(arr))): values_by_key[j] = i for x in arr: print(values_by_key[x], end=&#39; &#39;) 생각  중복값을 제거하고 컨테이너로 어떻게 전달할까?  순서  중복값 제거한 오름차순 정렬이 된 리스트를 순회 값을 키로, 인덱스를 해당 값의 값으로 저장 초기 리스트 순회하여 저장한 컨테이너로부터 찾아내서 출력  방법  set()으로 중복값 제거, list로 형변환 딕셔너리 사용  </description>
    </item>
    
    <item>
      <title>BOJ-4949-균형잡힌 세상[문자열 처리]</title>
      <link>https://xfrnk2.github.io/boj/4949/</link>
      <pubDate>Sat, 09 May 2020 00:48:07 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/4949/</guid>
      <description>BOJ-4949-균형잡힌 세상 문제 바로가기  나의 풀이 def get_result(sentence: str) -&amp;gt; bool: bracket_stack = [] for s in sentence: if s.isalpha(): continue elif s == &amp;quot;(&amp;quot;: bracket_stack.append(1) elif s == &amp;quot;[&amp;quot;: bracket_stack.append(0) elif s == &amp;quot;)&amp;quot; or s == &amp;quot;]&amp;quot;: try: if bracket_stack[-1] == 0 and s == &amp;quot;)&amp;quot;: return False elif bracket_stack[-1] == 1 and s == &amp;quot;]&amp;quot;: return False bracket_stack.pop() except IndexError: return False return not bracket_stack if __name__ == &#39;__main__&#39;: sentence_list = [] while True: get_input = input() if get_input == &#39;.</description>
    </item>
    
    <item>
      <title>BOJ-10825-국영수[정렬]</title>
      <link>https://xfrnk2.github.io/boj/10825/</link>
      <pubDate>Tue, 21 Apr 2020 00:55:42 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/10825/</guid>
      <description>BOJ-10825-국영수 문제 바로가기  나의 풀이 student_list = [list(map(lambda x: int(x) if x.isdecimal() else x, input().split())) for _ in range(int(input()))] student_list.sort(key=lambda student: (-student[1], student[2], -student[3], student[0])) for x in student_list: print(x[0]) 생각  operator.itemgetter도 이용할수 있을까? 정수판별을 위해서 어떤 함수를 사용하는게 적절할까?  순서  input값의 문자열이 정수일 경우 정수화 정렬 실행 0번째 인덱스에 위치한 학생의 이름을 출력  방법  정수 판별을 위해 isdecimal 이용 lambda함수를 이용 정렬하고자 하는 인덱스를 역순으로 정렬하기 위해 머리부분에 -를 붙임.</description>
    </item>
    
    <item>
      <title>BOJ-1026-보물[정렬]</title>
      <link>https://xfrnk2.github.io/boj/1026/</link>
      <pubDate>Mon, 20 Apr 2020 00:22:17 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/boj/1026/</guid>
      <description>BOJ-1026-보물 문제 바로가기  나의 풀이1 get_input = lambda:sorted(map(int, input().split())) get_input() print(sum(list(map(lambda x, y : x * y, get_input(), get_input()[::-1])))) 나의 풀이2 get_input = lambda:sorted(map(int, input().split())) get_input() print(sum(x*y for x, y in zip(get_input(), get_input()[::-1]))) 생각 reverse로 정렬하기보다 더 좋은방법이 없나 찾아본 결과 [::-1]이 가장 좋아보였다.
순서  정렬된 리스트를 얻어오는 함수를 작성 B를 역순으로 정렬 A와 B의 각각의 원소들을 곱한 리스트를 구한다. 구해진 리스트의 값을을 모두 더한 값을 반환한다.  방법  list와 map, lambda 함수를 이용해서 구현해 보았다.</description>
    </item>
    
  </channel>
</rss>