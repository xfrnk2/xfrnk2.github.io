<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pythons on Rad Blog</title>
    <link>https://xfrnk2.github.io/python/</link>
    <description>Recent content in Pythons on Rad Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 05 Apr 2021 11:20:34 +0900</lastBuildDate>
    
	<atom:link href="https://xfrnk2.github.io/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python - Short Circuit Operator로서의 or, and 연산자</title>
      <link>https://xfrnk2.github.io/python/python-operator_or_and_and/</link>
      <pubDate>Mon, 05 Apr 2021 11:20:34 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/python/python-operator_or_and_and/</guid>
      <description>   연산 수식     x or y if x is false, then y, else x   x and y if x is false, then x, else y     스위치를 이용해 값 병합할 때 사용 https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not  </description>
    </item>
    
    <item>
      <title>Python - Python의 변수 할당 매커니즘</title>
      <link>https://xfrnk2.github.io/python/python-variables_machanism/</link>
      <pubDate>Mon, 05 Apr 2021 11:19:34 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/python/python-variables_machanism/</guid>
      <description>파이썬은 변수를 생성할 때 변수를 위한 메모리를 생성하는 방식이 아니라, 변수가 만들어지고 어떠한 값을 넣으면 변수가 그 값을 참조하는 형태이다. 변수에 상수 값을 할당하고자 해도 값이 변경되기 때문에 파이썬에서는 상수를 사용하지 않는다. 그 대신 클래스를 사용한 여러가지 방법으로 상수를 정의할 수는 있다.(FrozenSpace, SpaceFrozenValues, __slots__, property, metaclass 등, 또는 Python 3.8~ typing.Final(*그러나 재할당 가능))   from uuid import uuid4 class obj: def __init__(self): self.__data = uuid4() self.__is_changed = False @property def data(self): return self.</description>
    </item>
    
    <item>
      <title>Python - Namedtuple과 dataclass 비교 정리</title>
      <link>https://xfrnk2.github.io/python/comparison_namedtuple_and_dataclass/</link>
      <pubDate>Wed, 18 Nov 2020 14:10:57 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/python/comparison_namedtuple_and_dataclass/</guid>
      <description> ＊NamedTuple은 tuple을 상속받았으며 tuple 구조는 c로 작성되었다. 그러므로 해시나 비교 등의 메서드가 빠르다.
  ＊dataclass는 dictionary에 기초하므로 장단점의 차이가 생긴다.
  ＊예를 들면 공간 사용은 tuple이 더 작으나, 액세스 속도는 dataclass가 더 빠르다.
  ＊따라서 원하는 데이터의 구조가 immutable하고, hashable, iterable, unpackable, comparable하다면 NamedTuple을 사용하는 편이 좋다. 그리고 예를들어 상속의 가능성 등 복잡한 구조를 원한다면 dataclass를 사용하는 편이 좋다.
  참고 링크
https://stackoverflow.com/questions/51671699/data-classes-vs-typing-namedtuple-primary-use-cases  </description>
    </item>
    
    <item>
      <title>Python - collections의 namedtuple과 typing의 NamedTuple 비교</title>
      <link>https://xfrnk2.github.io/python/comparison_namedtuple_and_namedtuple/</link>
      <pubDate>Wed, 18 Nov 2020 13:10:57 +0900</pubDate>
      
      <guid>https://xfrnk2.github.io/python/comparison_namedtuple_and_namedtuple/</guid>
      <description>코드 사용 예 - typing의 NamedTuple from typing import NamedTuple class Employee(NamedTuple): name: str id: int  코드 사용 예 - collections의 namedtuple from collections import namedtuple Employee = namedtuple(&#39;Employee&#39;, [&#39;name&#39;, &#39;id&#39;])   typing의 Namedtuple을 사용하는 편이 보다 자연스러운 인터페이스를 선언할 수 있다. collections의 namedtuple의 신버전이 typing의 NamedTuple이다.
 typinng의 NamedTuple을 사용하면 좋은 점  type 이름을 두 번 반복 할 필요가 없다. ( 예시에서의 &amp;ldquo;Employee&amp;rdquo;) type을 사용자가 직접 정의 할 수 있다.</description>
    </item>
    
  </channel>
</rss>